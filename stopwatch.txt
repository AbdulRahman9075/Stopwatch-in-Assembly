INCLUDE Irvine32.inc
.data

; Display Strings
prompt byte "Press SPACE to start/stop , ESC to lap , BACKSPACE to reset ",0
hrsstr byte "H : ",0
minstr byte "M : ",0
secstr byte "S",0
lapstr byte "LAP: ",0

; Time variables
hrs  DWORD 0
min  DWORD 0
sec  DWORD 0

startTimer BYTE 0        ; Flag to control start/stop of stopwatch

.code

; Display Time
printTime PROC
    mov eax, hrs
    call WriteDec                   ; Display hours
    mov edx, OFFSET hrsstr
    call WriteString
    
    mov eax, min
    call WriteDec                   ; Display minutes
    mov edx, OFFSET minstr
    call WriteString
    
    mov eax, sec
    call WriteDec                   ; Display seconds
    mov edx, OFFSET secstr
    call WriteString
    call Crlf                      
    ret
printTime ENDP




;Change Flag
toggleTimer PROC
    mov al, startTimer
    xor al, 1                       ; Toggle the flag (0 -> 1, 1 -> 0)
    mov startTimer, al
    ret
toggleTimer ENDP

; Increment counter every second
incrementTime PROC
    inc sec
    cmp sec, 60
    jl updateDisplay

    mov sec, 0
    inc min
    cmp min, 60
    jl updateDisplay

    mov min, 0
    inc hrs
    updateDisplay:
        call printTime
    ret
incrementTime ENDP

; Reset original time (only allowed when timer is stopped)
resetTime PROC
    cmp startTimer, 0               ; Check if timer is running
    je performReset
    ret                             ; Exit if timer is running (prevent reset)

performReset:
    mov hrs, 0
    mov min, 0
    mov sec, 0
    call clrscr
    mov edx,offset prompt
    call writestring
    call crlf
    call printTime                  ; Immediately display 00:00:00 after reset
    ret
resetTime ENDP

keyHandler PROC

    call ReadKey                  ; Attempt to read character
    jz noKeyPressed                  ; If no key pressed, skip the rest

    cmp al, 1bh
    je laptime                      ;LAP time on ESC key, only if timer is running
    cmp al, 08h
    je resetTime                     ; Reset time on BACKSPACE key, only if timer is stopped
    cmp al, ' '
    je toggleTimer                   ; Toggle timer start/stop on space

    noKeyPressed:
    ret
keyHandler ENDP

laptime proc
    cmp startTimer, 1               ; Check if timer is running
    je performLap
    ret   
    
    performLap:
        call crlf
        mov edx,offset lapstr
        call writestring
        call printTime
        call crlf
    ret
laptime endp

main PROC
    call clrscr                     ; Clear the screen
    mov edx, OFFSET prompt          ; Display prompt
    call WriteString
    call crlf
    call printTime          ;       ; Display initial time (00:00:00)        

    ; Main loop
    mainLoop:
        call keyHandler             ; Check for keyboard input to control timer
        cmp startTimer, 1           ; Check if the timer has started
        jne mainLoop                ; If not started, stay in this loop

    runningLoop:
        mov eax, 1000               ; 1-second delay
        call Delay                  ; Delay to simulate timer (1 second)
        
        call incrementTime          ; Increment time every second

        call keyHandler             ; Check for keyboard input to allow stopping

        cmp startTimer, 1           ; Check if timer is still running
        je runningLoop              ; If still running, continue incrementing
        
        jmp mainLoop                ; If stopped, go back to waiting for start
    exit
main ENDP

END main
